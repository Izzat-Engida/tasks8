{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/hp/OneDrive/Desktop/tasks/task8/app/lib/authOptions.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport axios from \"axios\";\r\n\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: {\r\n      id: string;\r\n      email: string;\r\n      name: string;\r\n    };\r\n    accessToken: string;\r\n  }\r\n\r\n  interface User {\r\n    id: string;\r\n    email: string;\r\n    name: string;\r\n    accessToken: string;\r\n  }\r\n}\r\n\r\ndeclare module \"next-auth/jwt\" {\r\n  interface JWT {\r\n    id: string;\r\n    accessToken: string;\r\n    accessTokenExpires?: number;\r\n  }\r\n}\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_ID!,\r\n      clientSecret: process.env.GOOGLE_SECRET!,\r\n    }),\r\n\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials, req) {\r\n        if (!credentials?.email || !credentials.password) {\r\n          throw new Error(\"Email and password are required.\");\r\n        }\r\n\r\n        try {\r\n          const res = await axios.post(\"https://akil-backend.onrender.com/login\", {\r\n            email: credentials.email,\r\n            password: credentials.password,\r\n          });\r\n\r\n          const user = res.data?.data;\r\n          const token = res.data?.accessToken;\r\n\r\n          if (user && token) {\r\n            return {\r\n              id: user.id,\r\n              email: user.email,\r\n              name: user.name,\r\n              accessToken: token,\r\n            };\r\n          }\r\n\r\n          throw new Error(\"Invalid credentials.\");\r\n        } catch (error: any) {\r\n          console.error(\"Authorize error:\", error?.response?.data || error.message);\r\n          throw new Error(\"Invalid email or password.\");\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n\r\n  pages: {\r\n    signIn: \"/api/auth/signin\", \r\n    error: \"/api/auth/error\", \r\n  },\r\n\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.accessToken = user.accessToken;\r\n        token.accessTokenExpires = Date.now() + 3600 * 1000; \r\n      }\r\n      return token;\r\n    },\r\n\r\n    async session({ session, token }) {\r\n      session.user.id = token.id as string;\r\n      session.accessToken = token.accessToken as string;\r\n      return session;\r\n    },\r\n  },\r\n\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\nexport default NextAuth(authOptions);\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AA4BO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;QAEA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW,EAAE,GAAG;gBAC9B,IAAI,CAAC,aAAa,SAAS,CAAC,YAAY,QAAQ,EAAE;oBAChD,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI;oBACF,MAAM,MAAM,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,2CAA2C;wBACtE,OAAO,YAAY,KAAK;wBACxB,UAAU,YAAY,QAAQ;oBAChC;oBAEA,MAAM,OAAO,IAAI,IAAI,EAAE;oBACvB,MAAM,QAAQ,IAAI,IAAI,EAAE;oBAExB,IAAI,QAAQ,OAAO;wBACjB,OAAO;4BACL,IAAI,KAAK,EAAE;4BACX,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;4BACf,aAAa;wBACf;oBACF;oBAEA,MAAM,IAAI,MAAM;gBAClB,EAAE,OAAO,OAAY;oBACnB,QAAQ,KAAK,CAAC,oBAAoB,OAAO,UAAU,QAAQ,MAAM,OAAO;oBACxE,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;KACD;IAED,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IAEA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,WAAW,GAAG,KAAK,WAAW;gBACpC,MAAM,kBAAkB,GAAG,KAAK,GAAG,KAAK,OAAO;YACjD;YACA,OAAO;QACT;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC1B,QAAQ,WAAW,GAAG,MAAM,WAAW;YACvC,OAAO;QACT;IACF;IAEA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;uCACe,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/hp/OneDrive/Desktop/tasks/task8/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport { authOptions } from \"@/app/lib/authOptions\";\r\n\r\nconst handler=NextAuth(authOptions);\r\n\r\nexport {handler as GET,handler as POST}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAQ,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,2HAAA,CAAA,cAAW","debugId":null}}]
}