{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/hp/OneDrive/Desktop/task4/job/app/lib/jobs.ts"],"sourcesContent":["import {Posting,JobData} from '@/app/types/job'\r\nexport async function getAllJobPostings():Promise<Posting[]>{\r\n    const res = await fetch(\r\n    \"https://drive.google.com/uc?export=download&id=1QAObCWl5f0Ytc3bUHRREdNVBd4P-dO07\",\r\n    {\r\n      cache: 'force-cache'\r\n    }\r\n  );\r\n   let data: JobData;\r\n  try {\r\n    data = await res.json();\r\n  } catch (e) {\r\n    console.error(\"Response is not valid JSON:\", e);\r\n    throw new Error(\"Failed to parse job postings data as JSON.\");\r\n  }\r\n\r\n  if (!data || !Array.isArray(data.job_postings)) {\r\n    throw new Error(\"Job postings data is not in the expected format.\");\r\n  }\r\n  const job_postings_with_index: Posting[] = data.job_postings.map((job, index) => ({\r\n    ...job,\r\n    id: index \r\n  }));\r\n  return job_postings_with_index;\r\n\r\n}\r\nexport async function  getJobByIndex(index:number):Promise<Posting|undefined>{\r\n    const jo=await getAllJobPostings();\r\n    return jo.find(job=>job.id==index)\r\n}"],"names":[],"mappings":";;;;AACO,eAAe;IAClB,MAAM,MAAM,MAAM,MAClB,oFACA;QACE,OAAO;IACT;IAED,IAAI;IACL,IAAI;QACF,OAAO,MAAM,IAAI,IAAI;IACvB,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,QAAQ,CAAC,MAAM,OAAO,CAAC,KAAK,YAAY,GAAG;QAC9C,MAAM,IAAI,MAAM;IAClB;IACA,MAAM,0BAAqC,KAAK,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,QAAU,CAAC;YAChF,GAAG,GAAG;YACN,IAAI;QACN,CAAC;IACD,OAAO;AAET;AACO,eAAgB,cAAc,KAAY;IAC7C,MAAM,KAAG,MAAM;IACf,OAAO,GAAG,IAAI,CAAC,CAAA,MAAK,IAAI,EAAE,IAAE;AAChC","debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/hp/OneDrive/Desktop/task4/job/app/components/ShowDetails.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Posting } from \"../types/job\";\r\ntype Deatil={\r\n    job:Posting\r\n}\r\nexport function ShowDetails({job}:Deatil){\r\n    return (\r\n        <div>\r\n            {job.company}\r\n        </div>\r\n    )\r\n}"],"names":[],"mappings":";;;;;AAKO,SAAS,YAAY,EAAC,GAAG,EAAQ;IACpC,qBACI,8OAAC;kBACI,IAAI,OAAO;;;;;;AAGxB","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/hp/OneDrive/Desktop/task4/job/app/description/%5Bid%5D/page.tsx"],"sourcesContent":["import { getJobByIndex,getAllJobPostings } from \"@/app/lib/jobs\";\r\nimport { notFound } from \"next/navigation\";\r\nimport { ShowDetails } from \"@/app/components/ShowDetails\";\r\nimport { Posting } from \"@/app/types/job\";\r\ntype Detail={\r\n  params:{\r\n    id:string\r\n  }\r\n}\r\nexport async function generate(){\r\n  const jobs=await getAllJobPostings();\r\n  return jobs.map((jo,index)=>({\r\n    id:index.toString()\r\n  }));\r\n}\r\n\r\nexport default async function JobDetail({params}:Detail) {\r\n  const index=parseInt(params.id)\r\n  const selected=await getJobByIndex(index)\r\n  if(isNaN(index)||selected==undefined){\r\n    notFound();\r\n  }\r\n  return (<ShowDetails job={selected}/>)\r\n  \r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AACA;;;;;AAOO,eAAe;IACpB,MAAM,OAAK,MAAM,CAAA,GAAA,kHAAA,CAAA,oBAAiB,AAAD;IACjC,OAAO,KAAK,GAAG,CAAC,CAAC,IAAG,QAAQ,CAAC;YAC3B,IAAG,MAAM,QAAQ;QACnB,CAAC;AACH;AAEe,eAAe,UAAU,EAAC,MAAM,EAAQ;IACrD,MAAM,QAAM,SAAS,OAAO,EAAE;IAC9B,MAAM,WAAS,MAAM,CAAA,GAAA,kHAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,IAAG,MAAM,UAAQ,YAAU,WAAU;QACnC,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IACA,qBAAQ,8OAAC,iIAAA,CAAA,cAAW;QAAC,KAAK;;;;;;AAE5B","debugId":null}}]
}